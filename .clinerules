# TSCF - WordPress プラグイン開発ルール

## プロジェクト概要
TSCF (Tarosky Custom Field manager) は、カスタムフィールドを効率的に管理するためのWordPressプラグインです。
- WordPressのカスタムフィールド管理プラグイン
- PHP 7.4以上が必要
- PHP依存関係管理にComposerを使用
- JavaScript依存関係管理にnpmを使用
- ビルドプロセスにGulpを使用

## 開発環境セットアップ

### 前提条件
- Node.js 16以上（`n`で管理）
- PHP 7.4以上
- Composer
- Docker Desktop for Mac

### 初期セットアップ
1. PHP依存関係のインストール: `composer install`
2. JavaScript依存関係のインストール: `npm install --ignore-scripts --legacy-peer-deps`
3. WordPress環境の起動: `npm start`
4. アセットのビルド: `npm run package`
5. 開発中の変更監視: `npm run watch`

### WordPress環境
- 開発サイト: http://localhost:8888
- テストサイト: http://localhost:8889
- ローカル開発に@wordpress/envを使用
- MySQLポートは動的に割り当て

## コード品質とリンティング

### PHP
- 構文チェック実行: `composer lint`
- PHP問題の修正: `composer fix`
- テスト実行: `composer test`
- WordPressコーディング規約に準拠
- PHPクラスにPSR-0オートローディングを使用

### JavaScript & CSS
- JS/CSS構文チェック実行: `npm run lint`
- ESLint設定: `.eslintrc`
- Stylelint設定: `.stylelintrc.json`

## 重要なファイルと構造

### メインファイル
- メインプラグインファイル: `tscf.php`
- ブートストラップ: `src/Tarosky/TSCF/Bootstrap.php`
- 関数: `functions.php`
- 管理画面インターフェース: `admin.php`

### アセット
- JavaScriptソース: `assets/js/src/`
- SCSSソース: `assets/scss/`
- ビルド済みアセット: `assets/css/` と `assets/js/dist/`
- ビルド設定: `gulpfile.js`

### PHPクラス
- 名前空間: `Tarosky\TSCF`
- パターン: `src/Tarosky/TSCF/Pattern/`
- UIコンポーネント: `src/Tarosky/TSCF/UI/`
- フィールドタイプ: `src/Tarosky/TSCF/UI/Fields/`
- ユーティリティ: `src/Tarosky/TSCF/Utility/`

## ビルドプロセス

### 開発
- ウォッチモード: `npm run watch`
- SCSSをCSSにコンパイル
- JavaScriptをバンドル・圧縮
- ベンダーライブラリをコピー

### 本番
- 全アセットのビルド: `npm run package`
- 圧縮・最適化された出力
- ソースマップ生成

### リリースプロセス
- GitHub Actionsワークフローを使用（`.github/workflows/wordpress.yml`）
- README.mdからreadme.txtを自動生成
- プラグインファイルのバージョン更新
- 配布用ZIPファイル作成

## 既知の問題と回避策

### Node.js互換性
- node-sassは非推奨で、Node.js 18以上でビルド問題が発生
- 回避策: `npm install --ignore-scripts --legacy-peer-deps`を使用
- 将来的に`sass`（Dart Sass）への移行を検討

### 依存関係
- 多くの依存関係が非推奨だが、まだ機能している
- Angular 1.xを使用（レガシーだが、このプロジェクトでは安定）
- WordPress環境にはDockerが必要

## テスト
- PHP単体テスト: `composer test`
- WordPressテスト環境: localhost:8889で利用可能
- テストブートストラップ: `tests/bootstrap.php`

## コーディング規約
- PHPはWordPressコーディング規約に従う
- 意味のあるディレクトリ構造を使用
- ファイルは可能な限り500行以下に保つ
- 「関心の分離」原則を適用
- 一貫した命名規則を使用

## Gitワークフロー
- リポジトリ: https://github.com/tarosky/tscf
- issue/PR管理に`gh`コマンドを使用
- 許可なしでコミットできるのはコードで確認可能な変更のみ
- UI変更やログインが必要な処理は許可を求める
